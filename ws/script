// @ts-nocheck

document.getElementById('loading-overlay').style.display = "";

function createProductHTML(product) {
    return `<section id="about${product.id}" class="customsection"
                style="--c1: ${product.colour}10;">
<div class="features .container">
  <div class="header">
     <h2 class="subtle" style="text-shadow: ${product.colour}10 0 5px 5px;font-size: 18px;font-weight: 800;">${product.name}<hr style="border-color:${product.colour}20;width:10%;"></h2>
     <a href="#${product.id + "_prices"}"
              onmouseover="document.getElementById('darrow${product.id}').style.color = '${product.colour}'"
              onmouseout="document.getElementById('darrow${product.id}').style.color = 'white'">
              <p><i id="darrow${product.id}" class="fa fa-angle-double-down"
                 onmouseover="this.style.color = '${product.colour}'"
                 onmouseout="this.style.color = 'white'"
                 style="font-size: 19px;color:white;" aria-hidden="true"></i> 
           <a href="#${product.id + "_prices"}"
              style="font-size: 19px;color:white;"
              onmouseover="document.getElementById('darrow${product.id}').style.color = '${product.colour}'"
              onmouseout="document.getElementById('darrow${product.id}').style.color = 'white'">SEE PRICES</a></p>
           </a>
  </div>
  <div class="feature-list" style="margin-top:0px;">
     <div class="feature grid grid-2" style="float:none; width:auto;padding:0;">
        <h2 style="font-size: 18px;font-weight: 800;">Features</h2>
        <div class="grid-content-box"
           style="border-bottom: 1px solid ${product.colour};box-shadow: 0 0 30px 0 ${product.colour}33;">
           ${product.features}
        </div>
     </div>
     <br>
     <hr style="border-color:${product.colour}20;width:50%;">
     <div class="feature grid grid-2" style="float:none; width:auto;padding:0;">
        <h2 style="font-size: 18px;font-weight: 800;">Security & Staff</h2>
        <div class="grid-content-box"
           style="border-bottom: 1px solid ${product.colour};box-shadow: 0 0 30px 0 ${product.colour}33;">
           ${product.secNStaff}
        </div>
     </div>
  </div>
  ${(product.hasPreview == true) ? (`<div class="clear"></div>
     <hr style="border-color:${product.colour}20;width:50%;">
     <h2 style="font-size: 18px;font-weight: 800;">MEDIA</h2>
    <div class="main_view">
    <div class="preview-container" data-images='${JSON.stringify(product.preview_imgs)}' data-is-first-video="${product.previewVideo}">
<img src="" alt="preview-product-${product.name}">
<iframe width="704" height="315" src="" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
<button class="prev-btn" style="background-color: #0f0f0f8c;
border: 0;
color: white;
border-radius: 5px;
padding: 10px;
margin: 5px;">  
<i class="fa fa-angle-double-left" aria-hidden="true"></i>
</button>
<button class="next-btn"style="background-color: #0f0f0f8c;
border: 0;
color: white;
border-radius: 5px;
padding: 8px;
margin: 5px;">
<i class="fa fa-angle-double-right" aria-hidden="true"></i>
</button>`) : ("")}
</div>
</div>
</div>
</section>
<section class="zproducts" id="${product.id + "_prices"}" style="background: url(${product.bgImg});position:relative;min-height: calc(100% - 100px);
background-repeat: no-repeat;
background-position: center;
background-size: cover;">
<div class="header">
  <h1 class="subtle" style="width:350px;border-bottom: 1px solid ${product.colour};">GET PRODUCT</h1>
</div>
<div class="container" style="width: 350px;border-bottom: 1px solid ${product.colour};box-shadow: 0 0 30px 0 ${product.colour}33;">
  <div class="grid grid-1">
     <div class="item">
        <p style="font-size: 24px;margin-top:10px">SUBSCRIPTION</p>
        <div class="list-func">
           <a href="#about${product.id}"
              onmouseover="document.getElementById('uarrow${product.id}').style.color = '${product.colour}'"
              onmouseout="document.getElementById('uarrow${product.id}').style.color = 'white'">
              <h1><i id="uarrow${product.id}" class="fa fa-angle-double-up"
                 onmouseover="this.style.color = '${product.colour}'"
                 onmouseout="this.style.color = 'white'"
                 style="font-size: 19px;color:white;" aria-hidden="true"></i> 
           <a href="#about${product.id}"
              style="font-size: 19px;color:white;"
              onmouseover="document.getElementById('uarrow${product.id}').style.color = '${product.colour}'"
              onmouseout="document.getElementById('uarrow${product.id}').style.color = 'white'">See Features</a></h1>
           </a>
        </div>
        <br>
        <div style="display: -webkit-box;
           display: -ms-flexbox;
           display: flex;
           -webkit-box-pack: center;
           -ms-flex-pack: center;
                   justify-content: center;
           height: 30px;
           -ms-flex-line-pack: start;
               align-content: flex-start;
           -webkit-box-align: center;
           -ms-flex-align: center;
                   align-items: center;
           -ms-flex-wrap: wrap;
               flex-wrap: wrap;">
           <label for="sub_price_combo_${product.id}">Final Price:&nbsp;</label>
           <span id="final_price_${product.id}" style="font-weight:bold;">${"&nbsp;$" + product.subsType.prices[0]}</span>
        </div>
        <ul class="range-labels" id="range_labels_${product.id}"></ul>
        <br>
        <br>
        <div class="range" id="range_${product.id}">
           <input type="range" min="1" max="1" steps="1" value="1">
        </div>
        <hr style="border-color:${product.colour}20;width:50%;">
        <p><a class="btn-full" id="SAbtn_buy_${product.id}" style="font-weight:800;cursor:pointer;box-shadow: 0 0 30px 0 ${product.colour}33;"
            data-SA-pr="none">BUY NOW! (USD/EU)</a></p>
           <br>
            <p style="font-size: 19px;margin-top:10px">OR</p>
            <p><a class="btn-full" href="https://ceneka.net/zincheats" style="font-weight:800;cursor:pointer;box-shadow: 0 0 30px 0 ${product.colour}33;"
            data-SA-pr="none">BUY NOW! (LATAM)</a></p>
     </div>
  </div>
</div>
</section>
`;
}

var resUrl = "https://cdn.jsdelivr.net/gh/ColaCaprichosa/FPWLR/";
var defImg = resUrl + "main.png";

var gProducts = [];
var uData = {};

document.getElementById('dateSpan').innerHTML += new Date().getFullYear();

async function openProfile() {
    document.getElementById('profileDialog').style.display = "grid";
    document.body.style.overflowY = 'hidden';

    switchTabs("loadingPanel", 1);

    await sBtn('info');
}

function sha256(str) {
    const encoder = new TextEncoder();
    const data = encoder.encode(str);
    return crypto.subtle.digest("SHA-256", data).then(bufferToHex);
}

function bufferToHex(buffer) {
    const view = new DataView(buffer);
    let hex = '';
    for (let i = 0; i < view.byteLength; i += 4) {
        const value = view.getUint32(i);
        hex += value.toString(16).padStart(8, '0');
    }
    return hex;
}

function rDec(encodedStr, key) {
    const keyArray = Array.from(key, c => c.charCodeAt(0));
    const data = hexStringToByteArray(encodedStr);
    const decryptedData = rc4(keyArray, data);
    return byteArrayToString(decryptedData);
}

function rc4(key, data) {
    const s = new Array(256);
    for (let i = 0; i < 256; i++) {
        s[i] = i;
    }

    let j = 0;
    for (let i = 0; i < 256; i++) {
        j = (j + s[i] + key[i % key.length]) % 256;
        [s[i], s[j]] = [s[j], s[i]];
    }

    let i = 0;
    j = 0;
    const output = new Array(data.length);
    for (let k = 0; k < data.length; k++) {
        i = (i + 1) % 256;
        j = (j + s[i]) % 256;
        [s[i], s[j]] = [s[j], s[i]];
        const t = (s[i] + s[j]) % 256;
        output[k] = data[k] ^ s[t];
    }

    return output;
}

function hexStringToByteArray(hexString) {
    const byteArray = [];
    for (let i = 0; i < hexString.length; i += 2) {
        byteArray.push(parseInt(hexString.substr(i, 2), 16));
    }
    return byteArray;
}

function byteArrayToString(byteArray) {
    return String.fromCharCode.apply(null, byteArray);
}

function unescape(str) {
    while (str.length % 4 !== 0) {
        str += '=';
    }
    return str.replace(/-/g, '+').replace(/_/g, '/');
}

function decode(encodedStr, encoding) {
    const base64Url = unescape(encodedStr);
    const raw = window.atob(base64Url);
    const decodedData = new Uint8Array(raw.length);
    for (let i = 0; i < raw.length; i++) {
        decodedData[i] = raw.charCodeAt(i);
    }
    return new TextDecoder(encoding || 'utf-8').decode(decodedData);
}

function gTmStr(tms) {
    var date = new Date(+tms * 1000);

    var year = date.getFullYear();
    var month = ("0" + (date.getMonth() + 1)).substr(-2);
    var day = ("0" + date.getDate()).substr(-2);
    return (day + "/" + month + "/" + year);
}

async function updateUserPreview() {
    var fData = "";
    fData += "<p style='margin-top:0px;margin-bottom:0px;'><strong>@" + uData["alias"];

    if (uData["role"])
        fData += "<span style='display:inline;font-size:10px;color:" + roleclr[uData["role"].toLowerCase()] + ";'> (" + uData["role"] + ")</span><br></strong></p>";

    if (uData["user_id"])
        fData += "<p style='font-size:10px;margin-top:0px;'>uid: " + uData["user_id"];
    else
        fData += "<p style='font-size:10px;margin-top:0px;'>uid: NO";

    if (uData["register_time"])
        fData += " - joined: " + gTmStr(uData["register_time"]) + "</p>";
    else
        fData += "</p>";

    if (uData["description"])
        fData += "<p style='font-size:12px;margin-top: 0px;'>info: " + window.atob(uData["description"]) + "</p>";
    else
        fData += "<p></p>"

    document.getElementById("basicInfo").innerHTML = fData;

    var to_add_subs = "";
    uData["options"].forEach(element => {
        to_add_subs += "<p style='font-weight:bold;text-decoration:underline;'>" + element.name + " | live: " + ((element.live) ? ("yes") : ("no")) + "</p>";
        to_add_subs += "<p>buy at: " + gTmStr(element.buy_at) + "</p>";
        to_add_subs += "<p>last time used: " + ((element.last_used != undefined) ? ((element.last_used === "never") ? ("never") : (gTmStr(element.last_used))) : ("never")) + "</p>";
        to_add_subs += "<p>days left: " + ((element.days_left > 0.01) ? (Math.floor(element.days_left).toString()) : ("expired")) + "</p>";
        to_add_subs += "<hr style='border-color:rgba(255, 255, 255, 0.267);width:100%;'>";
    });

    document.getElementById("userSubscriptions").innerHTML = to_add_subs;
}

const fncs = [{
    id: "info", fn: async () => {
        var id = "info";

        /* var lSJWTLeft = localStorage.getItem('zincJWTLeft') || 1;
         var lSJWT = ((parseInt(lSJWTLeft) < Math.round(+new Date() / 1000)) ? (null) : (localStorage.getItem('zincJWT')));*/
        var lSJWT = localStorage.getItem('zincJWT');
        if (lSJWT != null) {
            await sha256(lSJWT).then(async (res) => { lSJWT = res; });
            await sha256(id).then(async (res) => { id = res; });

            try {
                fetch("https://odyssey-jnqq-dev.fl0.io/apit/init/manage/" + id + "/" + lSJWT)
                    .then(async response => response.json()).then(async (data) => {
                        if (!data.success) {
                            localStorage.removeItem('zincJWT');
                            alert(data.message);
                            return;
                        }

                        uData = JSON.parse(decode(rDec((data.message.split("&")[0]), data.message.split("&")[1] + Math.floor(Date.now() / (1000 * 60 * 60)).toString())));

                        updateUserPreview();
                        switchTabs("userPanel", 1, "grid");
                    }).catch(async (error) => {
                        console.log(error);
                        localStorage.removeItem('zincJWT');
                        switchTabs("lgregPanel", 1);
                    });
            } catch (error) {
                console.log(error);
                localStorage.removeItem('zincJWT');
                switchTabs("lgregPanel", 1);
            }
        }
        else {
            switchTabs("lgregPanel", 1);
        }
    }
}, {
    id: "continueLogin",
    fn: async () => {
        let userKey = document.getElementById('userkeyz');
        let userPw = document.getElementById('userpwz');
        let vHCaptcha = window.hcaptcha.getResponse();

        if (!vHCaptcha) {
            alert("wrong/invalid captcha");
            switchTabs("lgregPanel", 1);
            switchTabs('logindlg');
            return;
        }

        if (!userKey.validity.valid) {
            alert("wrong/invalid key input");
            switchTabs("lgregPanel", 1);
            switchTabs('logindlg');
            return;
        }

        if (!userPw.validity.valid) {
            alert("wrong/invalid password input");
            switchTabs("lgregPanel", 1);
            switchTabs('logindlg');
            return;
        }

        let keyz = userKey.value, pwz = userPw.value;
        await sha256(pwz).then(async (res) => { pwz = res; });
        await sha256(keyz).then(async (res) => { keyz = res; });

        const bodyz = { key: (keyz), pw: (pwz), token: (vHCaptcha) };

        fetch("https://odyssey-jnqq-dev.fl0.io/apit/init/login", {
            method: 'POST',
            body: JSON.stringify(bodyz),
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(async response => response.json()).then(async (data) => {
            window.hcaptcha.close();
            if (!data.success) {
                switchTabs("lgregPanel", 1);
                switchTabs('logindlg');
                alert(data.message);
                return;
            }

            uData = JSON.parse(decode(rDec((data.message), keyz)));
            localStorage.setItem("zincJWT", uData.jwt);
            localStorage.setItem("zincJWTLeft", uData.jwtTimeLeft);

            updateUserPreview();
            switchTabs("userPanel", 1, "grid");
        }).catch((error) => {
            console.log(error);
            window.hcaptcha.close()
        });
    }
},
{
    id: "continueRegistration",
    fn: async () => {
        let userKey = document.getElementById('userkey');
        let userPw = document.getElementById('userpw');
        let vHCaptcha = window.hcaptcha.getResponse();

        if (!vHCaptcha) {
            alert("wrong/invalid captcha");
            switchTabs("lgregPanel", 1);
            switchTabs('registerdlg');
            return;
        }

        if (!userKey.validity.valid) {
            alert("wrong/invalid key input");
            switchTabs("lgregPanel", 1);
            switchTabs('registerdlg');
            return;
        }

        if (!userPw.validity.valid) {
            alert("wrong/invalid password input");
            switchTabs("lgregPanel", 1);
            switchTabs('registerdlg');
            return;
        }

        let keyz = userKey.value, pwz = userPw.value;
        await sha256(pwz).then(async (res) => { pwz = res; });
        await sha256(keyz).then(async (res) => { keyz = res; });

        const bodyz = { key: (keyz), pw: (pwz), token: (vHCaptcha) };

        fetch("https://odyssey-jnqq-dev.fl0.io/apit/init/register", {
            method: 'POST',
            body: JSON.stringify(bodyz),
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(async response => response.json()).then(async (data) => {
            window.hcaptcha.close();
            if (!data.success) {
                alert(data.message);
                switchTabs("lgregPanel", 1);
                switchTabs('registerdlg');
                return;
            }

            alert(data.message + ". Login again to view your profile");

            switchTabs("lgregPanel", 1);
            switchTabs('logindlg');

        }).catch((error) => {
            console.log(error);
            window.hcaptcha.close();
            switchTabs("lgregPanel", 1);
            switchTabs('logindlg');
        });
    }
}];

async function sBtn(id) {
    if (id) {
        fncs.forEach(async (fnc) => {
            if (fnc.id == id) {
                switchTabs("loadingPanel", 1);
                await fnc.fn();
                return;
            }
        })
    }
}

async function switchTabs(id, type = 0, dType = "block") {
    //type:0 = login/register,
    //type:1 = info/tickets/actions

    const types = [".elementz", ".dPanels", ".dUserPanel", ".elementz"];
    type = types[Math.min(Math.max(0, type), types.length - 1)];

    const elements = document.querySelectorAll(type);
    elements.forEach(async (element) => {
        if (element.id === id) {
            element.style.display = dType;
        } else {
            element.style.display = "none";
        }
    });
}

function checkPr(id = 0) {
    if (hCID && hCID != "products") {
        if (document.getElementById('abtProducts').style.display == "none")
            window.location = id ? "?id=products#landing" : "?id=products#abtProducts";
    }
}

function getParameterByName(name, url) {
    if (!url) {
        url = window.location.href;
    }
    name = name.replace(/[[]]/g, '\\$&');
    const regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');
    const results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
}

const hCID = getParameterByName('id');

function addIcon(element) {
    var icon = element.querySelector("i.fab.fa-discord");
    if (!icon) {
        var icon = document.createElement("i");
        icon.classList.add("fab", "fa-discord");
        icon.style.backgroundColor = "transparent";
        icon.style.color = "white";
        icon.style.display = "inline-block";
        icon.addEventListener("mouseenter", function () {
            icon.style.color = "rgb(20,110,190)";
        });
        icon.addEventListener("mouseleave", function () {
            icon.style.color = "white";
        });
        element.appendChild(icon);
    } else {
        icon.style.display = "inline-block";
    }
}

async function fetchProducts() {
    await fetch(new Request(`https://raw.githubusercontent.com/ColaCaprichosa/FPWLR/main/ws/cfg?version=${gUV()}`, { cache: 'no-cache' }))
        .then(async (response) => response.text()).then(async (data) => {
            data = JSON.parse(atob(data));
            gProducts = data.prods;
        });
    /*await fetch('img/ws/cfg.json').then(async (response) => response.json()).then(async (data) => {
        gProducts = data.prods;
    });*/
}

async function setProducts() {
    document.getElementById('abtProducts').style.display = "block";
    const container = document.querySelector(".options-container-1");

    gProducts.forEach(async (product) => {
        if (product.hidden)
            return;

        const card = document.createElement("div");
        card.id = "cardz" + product.id;
        card.style.background = "linear-gradient(to bottom, " + (product.colour + product.gradient) + ")";
        card.style.backgroundImage = "linear-gradient(to bottom, " + (product.colour + product.gradient) + "), linear-gradient(" + (product.colour) + "10, " + (product.colour) + ")";

        if (product.itemImgSmall != undefined && product.itemImgSmall) {
            card.style.width = "170px";
            card.style.height = "165px";
        }
        card.classList.add("card");

        const image = document.createElement("img");
        image.id = "img_" + product.id;
        image.src = product.itemImg || defImg;
        image.alt = product.name + " product";

        if (product.itemImgSmall != undefined && product.itemImgSmall) {
            image.style.height = "39px";
        }

        /*
        card.addEventListener("mouseenter",()=>{
            image.src ="https://media.tenor.com/_4CsQy6on3gAAAAd/ak-spray.gif";
        });

        card.addEventListener("mouseleave",()=>{
            image.src = product.itemImg || defImg;
        });*/

        card.appendChild(image);

        const name = document.createElement("h2");

        if (product.itemImgSmall != undefined && product.itemImgSmall) {
            name.style.marginTop = "12px";
        }

        name.style.fontSize = "18px";
        name.style.fontWeight = "800";

        name.id = "name_" + product.id;
        name.textContent = product.name;
        card.appendChild(name);

        const span = document.createElement("span");
        span.style.display = "none";

        const link = document.createElement("a");
        link.classList.add("card-link");
        link.style.cursor = "pointer";
        link.id = "vp_" + product.id;

        link.onclick = async function () {
            if (product.disabled)
                return;

            document.getElementById("name_" + product.id).style.animation =
                "blinker 1s linear infinite";
            document.getElementById("name_" + product.id).textContent =
                "loading";

            document.getElementById("img_" + product.id).style.transition =
                "height 0.5s ease-in-out";

            if (product.itemImgSmall == undefined || product.itemImgSmall == false)
                document.getElementById("img_" + product.id).style.height =
                    "190px";
            else
                document.getElementById("img_" + product.id).style.height =
                    "120px";

            if (gProducts.length > 1) {
                //for (const key in gProducts) {
                {
                    gProducts.forEach(async (findpr) => {
                        if (findpr.hidden)
                            return;

                        if (findpr.id == product.id) {
                            document.getElementById("cardz" + findpr.id).style.width = "300px";
                            document.getElementById("cardz" + findpr.id).style.height = "250px";
                            return;
                        }
                        document.getElementById("cardz" + findpr.id).style.width = "0px";
                        document.getElementById("cardz" + findpr.id).style.height = "0px";
                    });
                }
            }

            link.style.display = "none";

            await new Promise(resolve => setTimeout(resolve, 500));

            setTimeout(function () { window.location = "?id=" + product.id + "#about" + product.id; }, 500);
            link.dispatchEvent(new Event("click"));
        };

        link.textContent = !product.disabled ? "VIEW PRODUCT" : "SOON";

        card.appendChild(link);
        container.appendChild(card);
    });
}

async function updProducts() {
    await fetchProducts();
    await new Promise((resolve) => setTimeout(resolve, 500));
    const pBody = document.getElementById("productsz");

    if (hCID) {
        hProduct = null;
        gProducts.forEach(async (product) => {
            if (product.id == hCID && !product.disabled && !product.hidden) {
                hProduct = product;
                return;
            }
        });

        if (hProduct) {
            pBody.innerHTML += createProductHTML(hProduct);
            document.getElementById("nextProduct").href = "#about" + hProduct.id;
        }
        else {
            await setProducts();
        }
    }
    else {
        await setProducts();
    }

    await previewListeners();
    await w84Elements();
    await addEventListeners();

    document.getElementById('content').style.opacity = 1;

    await $(document).ready(async function () {
        if (window.location.hash) {
            var hash = window.location.hash;
            $('html, body').animate({
                scrollTop: $(hash).offset().top
            }, 500);
        }

        await $("a").on('click', async function (event) {
            if (this.hash !== "") {
                event.preventDefault();
                var hash = this.hash;
                await $('html, body').animate({
                    scrollTop: $(hash).offset().top
                }, 500, async function () {
                    window.location.hash = hash;
                });
            }
        });
    });

    var coll = document.getElementsByClassName("faqsimple");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
            } else {
                content.style.display = "block";
            }
        });
    }
}

async function setupSliders(elements) {
    var sheet = document.createElement('style'),
        rangeInput = document.getElementById("range_" + elements.id).getElementsByTagName('input')[0],
        prefs = ['webkit-slider-runnable-track', 'moz-range-track', 'ms-track'];

    document.body.appendChild(sheet);

    var subscriptions = elements.subsType.days,
        rangeLabels = document.getElementById("range_labels_" + elements.id);

    for (var i = 0; i < subscriptions.length; i++) {
        var li = document.createElement("li");
        li.innerHTML = subscriptions[i];
        rangeLabels.appendChild(li);
    }

    rangeInput.setAttribute("max", subscriptions.length);

    var rangeWidth = document.getElementById("range_" + elements.id).offsetWidth;

    for (var i = 0; i < subscriptions.length; i++) {
        var label = document.getElementById("range_labels_" + elements.id).getElementsByTagName("li")[i];
        var left = i * (rangeWidth / subscriptions.length);
        label.style.left = left + "px";
    }

    var getTrackStyle = function (el) {
        var curVal = el.value,
            val = (curVal - 1) * (100 / (subscriptions.length - 1)),
            style = '';

        var labels = document.getElementById("range_labels_" + elements.id).getElementsByTagName('li');
        for (var i = 0; i < labels.length; i++) {
            labels[i].classList.remove("active", "selected");
        }

        var curLabel = document.getElementById("range_labels_" + elements.id).getElementsByTagName("li")[curVal - 1];
        curLabel.classList.add("active", "selected");

        for (var i = 0; i < curVal - 1; i++) {
            labels[i].classList.add("selected");
        }

        if (el.value - 1 != 0)
            for (var i = 0; i < prefs.length; i++) {
                style += '#' + "range_" + elements.id + ' {background: linear-gradient(to right, ' + elements.colour + ' 0%, #37adbf ' + val + '%, #fff ' + val + '%, #171717ba 0%)}';
                style += '#' + "range_" + elements.id + ' input::-' + prefs[i] + '{background: linear-gradient(to right, ' + elements.colour + ' 1%, #37adbf ' + val + '%, #fff ' + val + ', #171717ba 0%)}';
            }

        document.getElementById("final_price_" + elements.id).innerHTML = elements.subsType.prices[el.value - 1];
        document.getElementById("SAbtn_buy_" + elements.id).setAttribute("data-SA-pr", elements.subsType.shop_codes[el.value - 1]);

        return style;
    }

    if (elements.subsType.defVal) {
        sheet.textContent = getTrackStyle({ value: elements.subsType.defVal });
        rangeInput.value = elements.subsType.defVal;
        rangeInput.dispatchEvent(new Event('input'));
    }

    rangeInput.addEventListener('input', function () {
        sheet.textContent = getTrackStyle(this);
    });

    var labels = document.getElementById("range_labels_" + elements.id).getElementsByTagName('li');
    for (var i = 0; i < labels.length; i++) {
        labels[i].addEventListener('click', function () {
            var index = Array.prototype.indexOf.call(labels, this);
            rangeInput.value = index + 1;
            rangeInput.dispatchEvent(new Event('input'));
            document.getElementById("final_price_" + elements.id).innerHTML = elements.subsType.prices[index];
            document.getElementById("SAbtn_buy_" + elements.id).setAttribute("data-SA-pr", elements.subsType.shop_codes[index]);
        });
    }

    /*events*/
    document.getElementById("SAbtn_buy_" + elements.id).addEventListener("click", () => {
        window.open("https://zincheats.sell.app/product/" + document.getElementById("SAbtn_buy_" + elements.id).getAttribute("data-SA-pr"), "_blank");
    });
}

async function previewListeners() {
    var previewContainers = document.querySelectorAll('.preview-container');
    previewContainers.forEach(function (previewContainer) {
        var images = JSON.parse(previewContainer.getAttribute('data-images'));

        var isFirstVideo = JSON.parse(previewContainer.getAttribute('data-is-first-video'));
        var currentImageIndex = 0;
        var prevBtn = previewContainer.querySelector('.prev-btn');
        var nextBtn = previewContainer.querySelector('.next-btn');
        var image = previewContainer.querySelector('img');
        var video = previewContainer.querySelector('iframe');
        checkMedia();
        checkButtons();

        prevBtn.addEventListener('click', function () {
            currentImageIndex--;
            if (currentImageIndex < 0) {
                currentImageIndex = images.length - 1;
            }
            checkMedia();
            checkButtons();
        });

        nextBtn.addEventListener('click', function () {
            currentImageIndex++;
            if (currentImageIndex >= images.length) {
                currentImageIndex = 0;
            }
            checkMedia();
            checkButtons();
        });

        async function checkButtons() {
            if (currentImageIndex === 0) {
                prevBtn.classList.add("hidden");
            } else {
                prevBtn.classList.remove("hidden");
            }

            if (currentImageIndex === images.length - 1) {
                nextBtn.classList.add("hidden");
            } else {
                nextBtn.classList.remove("hidden");
            }
        }

        async function checkMedia() {
            if (currentImageIndex === 0 && isFirstVideo) {
                image.style.display = "none";
                video.src = `https://www.youtube.com/embed/${images[currentImageIndex]}`;
                video.style.display = "block";
            } else {
                video.style.display = "none";
                image.src = images[currentImageIndex];
                image.style.display = "block";
            }
        }
    });
}

async function addEventListeners() {
    if (hCID) {
        hProduct = null;
        gProducts.forEach(async (product) => {
            if (product.id == hCID && !product.disabled && !product.hidden)
                hProduct = product;
        });

        if (hProduct)
            setupSliders(hProduct)
    }
}

async function w84Elements() {
    await new Promise(resolve => setTimeout(resolve, 2000));
    document.getElementById("loading-overlay").style.display = "none";
    document.getElementById("content").style.display = "block";
    document.getElementById('header').style.display = "block";
    document.getElementById('footer').style.display = "block";
}

updProducts();

console.log("hello");
///////////////////////
